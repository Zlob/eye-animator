/**
* Created with EyeAnimator.
* User: vamakin
* Date: 2016-10-08
* Time: 05:48 PM
* To change this template use Tools | Templates.
*/
define('eyeball',[],function() {

    var Eyeball = function (parent, options) {
                        
        this.parent = parent;
        
        this.options = {
            size       : 12,
            shift      : 20
        };

        this._setOptions(options);
        this._render();
    };
    
    Eyeball.prototype.track  = function (options) {
        if(options.angle){
            this._trackByAngle(options.angle, options.shift);
        }
        else if(options.x && options.y){
            this.trackByCoordinate(options.x, options.y, options.shift)
        }
    };

    Eyeball.prototype._setOptions = function (options) {
        for( var key in options ) {
            this.options[key] = options[key];
        }
    };

    Eyeball.prototype._render = function () {
        this.eyeballNode = this._createEyeballNode();
        return this;
    };

    Eyeball.prototype.change = function (options) {
        var self = this;
        self._setOptions(options);
        self._setNodeAttributes(this.eyeballNode);
    };
    
    Eyeball.prototype._createEyeballNode = function () {
        var eyeballNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        var pathNode = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        pathNode.setAttribute('name', 'eyeball');
        eyeballNode.appendChild(pathNode);
        this._setNodeAttributes(eyeballNode);
        this.parent.append(eyeballNode); 
        
        return eyeballNode;
    };
    
    Eyeball.prototype._setNodeAttributes = function (eyeballNode) {
        var eyeballPath = eyeballNode.querySelector("[name=eyeball]");
        
        eyeballPath.setAttribute("fill", "#000000");
        eyeballPath.setAttribute("stroke", "#000000");
        eyeballPath.setAttribute("stroke-width", 5);
        eyeballPath.setAttribute("stroke-linejoin", null);
        eyeballPath.setAttribute("stroke-linecap", null);
        eyeballPath.setAttribute("cx", 90 + parseInt(this.options["shift"]));
        eyeballPath.setAttribute("cy", 90);
        eyeballPath.setAttribute("r", this.options["size"]);

        return eyeballPath;
    };
    
    Eyeball.prototype._trackByAngle = function (angle, shift) {
        shift = shift || this.options['shift'];
                
        var x = 90 + shift * Math.cos(angle);
        var y = 90 + shift * Math.sin(angle);
        
        this._setEyeballCoordinates(x,y);
    };
    
    Eyeball.prototype.trackByCoordinate = function (x1, y1, shift) {
        shift = shift || this.options['shift'];
              
        //eye center
        var eyeCenter = this._getEyeballCoordinates();          
           
        //distance between eye center and point
        var d = Math.sqrt(Math.pow(eyeCenter.x - x1, 2) + Math.pow(eyeCenter.y - y1, 2));
        if (d <= shift) {
            shift = d;
        }
        //eyeball position
        var x = 90 - (eyeCenter.x - x1) / d * shift;
        var y = 90 - (eyeCenter.y - y1) / d * shift;

        this._setEyeballCoordinates(x,y);
    };
    
    Eyeball.prototype._setEyeballCoordinates = function (x, y) {
        var eyeballPath = this.eyeballNode.querySelector("[name=eyeball]");
        eyeballPath.setAttribute("cx", x);
        eyeballPath.setAttribute("cy", y)
    };
    
    Eyeball.prototype._getEyeballCoordinates = function () {
        var eyeballNodePosition = this.eyeballNode.getBoundingClientRect();
        var x = eyeballNodePosition.left + eyeballNodePosition.width/2;
        var y = eyeballNodePosition.top  + eyeballNodePosition.height/2;
        return { x: x, y: y };
    };
        
    return Eyeball;
});
/**
* Created with EyeAnimator.
* User: vamakin
* Date: 2016-10-09
* Time: 08:52 AM
* To change this template use Tools | Templates.
*/
define('topEyelid',[],function() {
    
    var TopEyelid = function (parent, type, options) {

        this.parent = parent;

        this.type = type;
        
        this.options = {
            //from 0 when open to 1 when closed
            size                    : 0,  
            color                   : 'white',
            borderColor             : '#000000',
            borderSize              : 5,
            //from 0 to 1, 0 if straight, 1 if rounded
            bottomArcRadius         : 0,
            //arc direction, 0  or 1
            bottomArcRadiusSweep    : 0,
            //none or loise
            eyelashesStyle          : 'none',
            //eyelid angle, from -30 to 30
            rotate                  : 0
        };
                
        this._setOptions(options);
        
        this._render();
    };
    
    TopEyelid.prototype.change = function (options) {
        var self = this;
        self._setOptions(options);        
        self._setNodeAttributes(self.eyelidNode)
    };
    
    TopEyelid.prototype._setOptions = function (options) {
        // Replace default optinos
        this.options.color = options.color || this.options.color;
        this.options.borderColor = options.borderColor || this.options.borderColor;
        this.options.borderSize = options.borderSize || this.options.borderSize;
        this.options.eyelashesStyle = options.eyelashesStyle || this.options.eyelashesStyle;
        this.options.bottomArcRadiusSweep = options.bottomArcRadiusSweep || this.options.bottomArcRadiusSweep;
        this._setRotate(options.rotate || this.options.rotate);
        this._setBottomArcRadius(options.bottomArcRadius || this.options.bottomArcRadius);
        this._setSize(options.size || this.options.size);   
    };
    
    TopEyelid.prototype._render = function () {
        this.eyelidNode = this._createEyelidNode();
        return this;
    };
    
    TopEyelid.prototype._setBottomArcRadius = function (param) {
        this.options.bottomArcRadius = this._normolizeParam(param);        
    };
    
    TopEyelid.prototype._setRotate = function (param) {
        if(param < -30){
            param = -30;
        } else if(param > 30){
            param  = 30;
        }        
        this.options.rotate = param;        
    };
        
    TopEyelid.prototype._setSize = function (param) {
        this.options.size = this._normolizeParam(param);        
    };
        
    TopEyelid.prototype._normolizeParam = function (param) {
        if(param >= 1){
            param = 0.999;
        }
        if(param < 0){
            param = 0;
        }
        return param;
    };

    TopEyelid.prototype._createEyelidNode = function () {
        var eyelidNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        var eyelidPathNode = document.createElementNS("http://www.w3.org/2000/svg", "path");
        eyelidPathNode.setAttribute('name', 'top-eyelid');
        eyelidNode.appendChild(eyelidPathNode);
        
        var eyelashesPathNode = document.createElementNS("http://www.w3.org/2000/svg", "path");
        eyelashesPathNode.setAttribute('name', 'top-eyelashes');
        eyelidNode.appendChild(eyelashesPathNode);
        
        this._setNodeAttributes(eyelidNode);
        this.parent.append(eyelidNode);

        return eyelidNode;
    };
    
    TopEyelid.prototype._setNodeAttributes = function (eyelidNode) {
        var eyelidPath = eyelidNode.querySelector("[name=top-eyelid]");
                
        eyelidPath.setAttribute("fill", this.options.color);
        eyelidPath.setAttribute("stroke", this.options.borderColor);
        eyelidPath.setAttribute("stroke-width", this.options.borderSize);
        eyelidPath.setAttribute("transform", "rotate("+this.options.rotate + ", 90, 90)");
        var d = this._createPath();
        eyelidPath.setAttribute('d', d);
        return eyelidPath;
    };
    
    TopEyelid.prototype._createPath = function ( ) {
        var angle = (Math.PI / 2) - (Math.PI * this.options.size);

        var startPointX = 90 - (Math.cos(angle) * 50 );
        var startPointY = 90 - (Math.sin(angle) * 50 );

        var endPointX = (90 + 90 - startPointX);
        var endPointY = startPointY;
        var d = "";
        //left start point
        d = d + "M" + startPointX + "," + startPointY;
        d = this._createTopArc(d, endPointX, endPointY);
        d = this._createBottomArc(d, startPointX, startPointY);
        if (this.options.eyelashesStyle == 'loise') {
            if (this.type == 'right') {
                d += this._createEyelashes(endPointX, endPointY, this.type);
            }
            else {
                d += this._createEyelashes(startPointX, startPointY, this.type);
            }
        }

        d = d + 'z'; //close path
        return d;
    };
    
    TopEyelid.prototype._createTopArc = function (d, endPointX, endPointY) {
        var largeArcFlag = this.options.size > 0.5 ? 1 : 0;
        //top arc
        d = d + " A50,50 0 " + largeArcFlag + " 1 ";
        //right end point
        d = d + endPointX + "," + endPointY;
        return d;
    };
    
    TopEyelid.prototype._createBottomArc = function (d, endPointX, endPointY) {
        if (this.options.bottomArcRadius != 0){
            //bottom arc
            var arcRadius = 50 / this.options.bottomArcRadius;
            d = d + " A" + arcRadius + "," + arcRadius + " 0 0 " + this.options.bottomArcRadiusSweep;
            //back to start point
            d = d + " " + endPointX + "," + endPointY;
        }
        else{
            //bottom line
            d = d + " L" + endPointX + ',' + endPointY;
        }     
        return d;
    };
    
    
    TopEyelid.prototype._createEyelashes = function (x, y, position) {
        var d = this._createFirstEyelash(x, y, position);
        d += this._createSecondEyelash(x, y, position);
        return d;
    };
    
    TopEyelid.prototype._createFirstEyelash = function (x, y, position) {
        var eyeLashCenterX = position == 'right' ? x + 10 : x - 10;
        var eyeLashCenterY = y;
        var eyeLashEndX = position == 'right' ? x + 15 : x -15;
        var eyeLashEndY = y - 15;
        
        return this._createEyelash(x, y, eyeLashCenterX, eyeLashCenterY, eyeLashEndX, eyeLashEndY); 
    };
    
    TopEyelid.prototype._createSecondEyelash = function (x, y, position) {
        var eyeLashCenterX = position == 'right' ? x + 25 : x - 25;
        var eyeLashCenterY = y;
        var eyeLashEndX = position == 'right' ? x + 25 : x - 25;
        var eyeLashEndY = y - 10;

        return this._createEyelash(x, y, eyeLashCenterX, eyeLashCenterY, eyeLashEndX, eyeLashEndY);
    };
    
    TopEyelid.prototype._createEyelash = function (startX, startY, centerX, centerY, endX, endY) {
        var d = " M " + startX + "," + startY;
        d += " Q" + centerX + "," + centerY + " " + endX + "," + endY + " ";
        //way back
        d += " Q" + centerX + "," + centerY + " " + startX + "," + startY + " ";
        return d;
    };
    
    return TopEyelid;
});
/**
* Created with EyeAnimator.
* User: vamakin
* Date: 2016-10-09
* Time: 08:52 AM
* To change this template use Tools | Templates.
*/
define('bottomEyelid',[],function() {
    
    var BottomEyelid = function (parent, options) {
        this.parent = parent;
        
        this.options = {
            //from 0 when open to 1 when closed
            size                    : 0,
            color                   : 'white',
            borderColor             : '#000000',
            borderSize              : 5,
            //from 0 to 1, 0 if straight, 1 if rounded
            topArcRadius            : 0,
            //arc direction, 0  or 1
            topArcRadiusSweep       : 0,
            //eyelid angle, from -30 to 30
            rotate                  : 0
        };
                
        this._setOptions(options);
        
        this._render();
    };
    
    BottomEyelid.prototype.change = function (options) {
        var self = this;
        self._setOptions(options);        
        self._setNodeAttributes(self.eyelidNode)
    };
    
    BottomEyelid.prototype._setOptions = function (options) {
        // Replace default optinos
        this.options.color = options.color || this.options.color;
        this.options.borderColor = options.borderColor || this.options.borderColor;
        this.options.borderSize = options.borderSize || this.options.borderSize;
        this.options.topArcRadiusSweep = options.topArcRadiusSweep || this.options.topArcRadiusSweep;
        this._setRotate(options.rotate || this.options.rotate);
        this._setTopArcRadius(options.topArcRadius || this.options.topArcRadius);
        this._setSize(options.size || this.options.size);   
    };
    
    BottomEyelid.prototype._render = function () {
        this.eyelidNode = this._createEyelidNode();
        return this;
    };
    
    BottomEyelid.prototype._setTopArcRadius = function (param) {
        this.options.topArcRadius = this._normolizeParam(param);        
    };
    
    BottomEyelid.prototype._setRotate = function (param) {
        if(param < -30){
            param = -30;
        } else if(param > 30){
            param  = 30;
        }        
        this.options.rotate = param;        
    };
    
    BottomEyelid.prototype._setSize = function (param) {
        this.options.size = this._normolizeParam(param);        
    };
        
    BottomEyelid.prototype._normolizeParam = function (param) {
        if(param >= 1){
            param = 0.999;
        }
        if(param < 0){
            param = 0;
        }
        return param;
    };
    
    BottomEyelid.prototype._createEyelidNode = function () {
        var eyelidNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        var pathNode = document.createElementNS("http://www.w3.org/2000/svg", "path");
        pathNode.setAttribute('name', 'bottom-eyelid');
        eyelidNode.appendChild(pathNode);
        this._setNodeAttributes(eyelidNode);
        this.parent.append(eyelidNode); 
        
        return eyelidNode;
    };
    
    BottomEyelid.prototype._setNodeAttributes = function (eyelidNode) {
        var eyelidPath = eyelidNode.querySelector("[name=bottom-eyelid]");
                
        eyelidPath.setAttribute("fill", this.options.color);
        eyelidPath.setAttribute("stroke", this.options.borderColor);
        eyelidPath.setAttribute("stroke-width", this.options.borderSize);
        eyelidPath.setAttribute("transform", "rotate("+this.options.rotate + ", 90, 90)");
        var d = this._createPath();
        eyelidPath.setAttribute('d', d);
        return eyelidPath;
    };
    
    BottomEyelid.prototype._createPath = function ( ) {
        var angle = (Math.PI/2) - (Math.PI * this.options.size);
                
        var startPointX = 90 - (Math.cos(angle) * 50 );
        var startPointY = 90 + (Math.sin(angle) * 50 );
        
        var endPointX = (90 + 90 - startPointX);
        var endPointY = startPointY;
        var d = "";
        //left start point
        d = d + "M"+startPointX+","+startPointY;
        d = this._createTopArc(d, endPointX, endPointY);
        d = this._createBottomArc(d, startPointX, startPointY);        
        
        d = d + 'z'; //close path
        return d;
    };
    
    BottomEyelid.prototype._createTopArc = function (d, endPointX, endPointY) {
        if (this.options.topArcRadius != 0){
            //bottom arc
            var arcRadius = 50 / this.options.topArcRadius;
            d = d + " A" + arcRadius + "," + arcRadius + " 0 0 " + this.options.topArcRadiusSweep;
            //back to start point
            d = d + endPointX + "," + endPointY;
        }
        else{
            //bottom line
            d = d + " L" + endPointX + ',' + endPointY;
        }     
        return d;
    };
    
    BottomEyelid.prototype._createBottomArc = function (d, endPointX, endPointY) {
        var largeArcFlag = this.options.size > 0.5 ? 1 : 0;
        //top arc
        d = d + " A50,50 0 " + largeArcFlag + " 1 ";
        //right end point
        d = d + endPointX + "," + endPointY;
        return d;
    };
    
    return BottomEyelid;
});
define('eyebrow',[],function(){

   var Eyebrow = function (parent, options) {
       this.parent = parent;

       this.options = {
           width                   : 80,
           height                  : 5,
           position                : 0.5, //from 0 (very  top) to 1 (near eye)
           color                   : '#000000',
           borderColor             : '#000000',
           borderSize              : 0,
           //eyebrow angle, from -30 to 30
           rotate                  : 0
       };

       this._setOptions(options);

       this._render();
   };

    Eyebrow.prototype._setOptions = function (options) {
        // Replace default optinos
        this.options.width = options.width || this.options.width;
        this.options.height = options.height || this.options.height;
        this.options.color = options.color || this.options.color;
        this.options.borderColor = options.borderColor || this.options.borderColor;
        this.options.borderSize = options.borderSize || this.options.borderSize;
        this._setRotate(options.rotate || this.options.rotate);
    };

    Eyebrow.prototype._setRotate = function (param) {
        if(param < -25){
            param = -25;
        } else if(param > 25){
            param = 25;
        }
        this.options.rotate = param;
    };

    Eyebrow.prototype._render = function () {
        this.eyelidNode = this._createEyebrowNode();
        return this;
    };

    Eyebrow.prototype.change = function (options) {
        var self = this;
        self._setOptions(options);
        self._setNodeAttributes(this.eyeballNode);
    };

    Eyebrow.prototype._createEyebrowNode = function () {
        var eyebrowNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        var eyebrowPathNode = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        eyebrowPathNode.setAttribute('name', 'eyebrow');
        eyebrowNode.appendChild(eyebrowPathNode);

        this._setNodeAttributes(eyebrowNode);
        this.parent.append(eyebrowNode);

        return eyebrowNode;
    };

    Eyebrow.prototype._setNodeAttributes = function (eyelidNode) {
        var eyelidPath = eyelidNode.querySelector("[name=eyebrow]");


        eyelidPath.setAttribute("width", this.options.width);
        eyelidPath.setAttribute("height", this.options.height);
        var x = 90 - this.options.width / 2;
        eyelidPath.setAttribute("x", x);
        var y = this._getY(this.options.height, this.options.borderSize, this.options.position);
        eyelidPath.setAttribute("y", y);
        eyelidPath.setAttribute("stroke", this.options.borderColor);
        eyelidPath.setAttribute("stroke-width", this.options.borderSize);
        eyelidPath.setAttribute("fill", this.options.color);
        eyelidPath.setAttribute("transform", "rotate(" + this.options.rotate + ", 90, 90)");
        return eyelidPath;
    };

    Eyebrow.prototype._getY = function (h, borderSize, position)  {
        return (90 - 50 - h - borderSize) * position;
    };

   return Eyebrow;
});
/**
* Created with EyeAnimator.
* User: vamakin
* Date: 2016-10-08
* Time: 03:52 PM
* To change this template use Tools | Templates.
*/
define('eye',['eyeball', 'topEyelid', 'bottomEyelid', 'eyebrow'], function(Eyeball, TopEyelid, BottomEyelid, Eyebrow) {
    
    var SVG_HTML_TEMPLATE = [
        '<svg name="svg-node" width="50" height="50" viewBox="0 0 180 180" xmlns="http://www.w3.org/2000/svg">',
        ' <g>',
        '  <circle name="eye" cx="90" cy="90" r="50" />',
        ' </g>',
        '</svg>'
    ].join("");
    
    var Eye = function (selector, options) {
        this.selector = selector;

        this._element = document.querySelector( selector );

        if ( !this._element ) {
            throw new Error("Not valid image selector");
        }
        
        // Default options
        this.options = {
            x             : 0,
            y             : 0,
            size          : 50,
            color         : "#FFFFFF",
            borderColor   : "#000000",
            borderSize    : 5,
            //left or right eye
            type          : 'left',
            //eyeball options
            eyeball: {
                size     : 12,
                shift    : 20
            },
            //top eyelid options
            topEyelid: {
                size                   : 0,
                color                  : "white",
                borderColor            : "#000000",
                borderSize             : 5,
                bottomArcRadius        : 0,
                bottomArcRadiusSweep   : 0,
                rotate                 : 0,
                eyelashesStyle         : 'none'
            },
            //bottom eyelid options
            bottomEyelid: {
                size                   : 0,
                color                  : "white",
                borderColor            : "#000000",
                borderSize             : 5,
                topArcRadius           : 0,
                topArcRadiusSweep      : 0,
                rotate                 : 0
            },
            eyebrow: {
                width                   : 80,
                height                  : 5,
                position                : 0.5, //from 0 (very  top) to 1 (near eye)
                color                   : '#000000',
                borderColor             : '#000000',
                borderSize              : 0,
                //eyebrow angle, from -30 to 30
                rotate                  : 0
            }
        };

        this._setOptions(options);
        this._render();
    };

    Eye.prototype._setOptions = function (options) {
        // Replace default optinos
        for( var key in options ) {
            this.options[key] = options[key];
        }
    };
    
    Eye.prototype.moveToPosition = function ( ) {
        this.move( this.options["x"], this.options["y"] );  
    };
        
    // Relative to parent image
    Eye.prototype.move = function ( x, y ) {
        var parentPosition = this._element.getBoundingClientRect();
        this._handlerNode.style.position = "absolute";
        this._handlerNode.style.left = parentPosition["left"] + (x + pageXOffset) + "px";
        this._handlerNode.style.top  = parentPosition["top"]  + (y + pageYOffset) + "px";
    };
    
    //append node
    Eye.prototype.append = function ( node ) {   
        this._handlerNode.querySelector("[name=svg-node]").appendChild(node);
    };

    Eye.prototype.change = function (options) {
        for (var key in options) {
            if (key == 'eyeball') {
                this.eyeball.change(options[key]);
            } else if (key == 'topEyelid') {
                this.topEyelid.change(options[key]);
            } else if (key == 'bottomEyelid') {
                this.bottomEyelid.change(options[key]);
            } else if (key == 'eyebrow') {
                this.eyebrow.change(options[key]);
            } else {
                if (this.options[key] !== undefined) {
                    this.options[key] = options[key];
                }
            }
        }
        this._setNodeAttributes(this._eyeNode);
    };
                
    Eye.prototype._render = function () {
        this._handlerNode = this._createHandlerNode(this.options["size"]);
        this._eyeNode = this._createEyeNode();
        
        this.eyeball = new Eyeball(this, this.options.eyeball);
        
        this.topEyelid = new TopEyelid(this, this.options.type, this.options.topEyelid);
        
        this.bottomEyelid = new BottomEyelid(this, this.options.bottomEyelid);

        this.eyebrow = new Eyebrow(this, this.options.eyebrow);
                
        document.body.appendChild( this._handlerNode );

        this.move( this.options.x, this.options.y );             
        
        //Set visible AFTER change position
        this._handlerNode.style.display = "block";   
    };
    
    Eye.prototype._createHandlerNode = function (size) {
        var _handlerNode = document.createElement("object");
        
        _handlerNode.style.display  = "none";
        _handlerNode.style.position = "absolute";    
        _handlerNode.setAttribute("width", size);
        _handlerNode.setAttribute("height", size);
        
        return _handlerNode;
    };
    
    Eye.prototype._createEyeNode = function () {
        var eyeNode = document.createElement("object");
        
        eyeNode.style.position = "absolute";    
        eyeNode.innerHTML = SVG_HTML_TEMPLATE;
        this._setNodeAttributes(eyeNode);
        this._handlerNode.appendChild(eyeNode); 
        
        return eyeNode;
    };
    
    Eye.prototype._setNodeAttributes = function (eyeNode) {
        var svgNode = eyeNode.querySelector("[name=svg-node]");
        svgNode.setAttribute("width", this.options['size']);
        svgNode.setAttribute("height", this.options['size']);       
        
        var eyePath = eyeNode.querySelector("[name=eye]");
        eyePath.setAttribute("fill", this.options['color']);
        eyePath.setAttribute("stroke", this.options['borderColor']);
        eyePath.setAttribute("stroke-width", this.options['borderSize']);
        
        return eyeNode;
    };

    return Eye;
});
/**
 * Created by Zloblin on 13.10.2016.
 */
define('eyesPair',['eye'], function (Eye) {

    var EyesPair = function (selector, options, center, distance) {
        this.leftEye = this._getEye(selector, options, center, distance, 'left');
        this.rightEye = this._getEye(selector, options, center, distance, 'right');
    };

    EyesPair.prototype._getEye = function (selector, options, center, distance, type) {
        var eyeOptions = JSON.parse(JSON.stringify(options));
        eyeOptions.type = type;
        if (type == 'left') {
            eyeOptions.x = center.x - distance/2;
            eyeOptions.y = center.y;
        } else if (type == 'right') {
            eyeOptions.x = center.x + distance/2;
            eyeOptions.y = center.y;
        }
        return new Eye(selector, eyeOptions);
    };

    EyesPair.prototype.getLeftEye = function() {
        return this.leftEye;
    };

    EyesPair.prototype.getRightEye = function() {
        return this.rightEye;
    };

    EyesPair.prototype.getEye = function(type) {
        if (type == 'left') {
            return this.getLeftEye();
        } else {
            return this.getRightEye();
        }
    };

    EyesPair.prototype.moveToPosition = function() {
        this.leftEye.moveToPosition();
        this.rightEye.moveToPosition();
    };


    return EyesPair;
});
/**
* Created with EyeAnimator.
* User: vamakin
* Date: 2016-10-08
* Time: 05:22 PM
* To change this template use Tools | Templates.
*/
define('eyes',['eye', 'eyesPair'], function(Eye, EyesPair) {
    
    var Eyes = function () {
        var self = this;
        
        var eyes = [];
        
        this.createEye = function (selector, options) {
            var eye = new Eye(selector, options);
            eyes.push(eye);
            return eye
        };

        this.createEyesPair = function (selector, options, center, distance) {
            var eyesPair = new EyesPair(selector, options, center, distance);
            eyes.push(eyesPair);
            return eyesPair
        };
        
        this._resize = function () {
            for( var idx in eyes ) {
                eyes[idx].moveToPosition();
            }
        };
        
        window.addEventListener("resize", function( e ) {
            self._resize();
        }, false);
        
    };
    
    return Eyes;
});
